// Import c√°c th∆∞ vi·ªán v√† module c·∫ßn thi·∫øt
const sql = require("mssql");
const sqlServerPool = require("../../Utils/connectMySql");
const sendEmail = require("../../Utils/mailer");
const sendNotification = require("../../Utils/sendNotification");

// H√†m c·∫≠p nh·∫≠t tr·∫°ng th√°i nh·∫≠t k√Ω u·ªëng thu·ªëc
const updateStatusMedicationDailyLog = async (req, res, next) => {
  const nurse_id = req.user?.user_id;
  const ReqId = req.params.ReqId; // ID c·ªßa y√™u c·∫ßu u·ªëng thu·ªëc
  const { status } = req.body;

  // 1. Ki·ªÉm tra n·∫øu kh√¥ng c√≥ status ƒë∆∞·ª£c g·ª≠i l√™n
  if (!status) {
    return res.status(400).json({
      status: "fail",
      message: "Missing required field: status",
    });
  }

  try {
    const pool = await sqlServerPool;
    if (!["GIVEN", "NOT GIVEN"].includes(status)) {
      return res.status(400).json({
        status: "fail",
        message: "Invalid status value. Must be 'GIVEN' or 'NOT GIVEN'.",
      });
    }

    // 2. Ki·ªÉm tra xem nh·∫≠t k√Ω c√≥ t·ªìn t·∫°i v·ªõi id_req kh√¥ng
    const checkLog = await pool
      .request()
      .input("id_req", sql.Int, ReqId)
      .input("nurse_id", sql.Int, nurse_id)
      .query("SELECT id_req FROM Medication_Daily_Log WHERE id_req = @id_req AND nurse_id = @nurse_id");

    if (checkLog.recordset.length === 0) {
      return res.status(404).json({
        status: "fail",
        message: `No Medication Daily Log found with id_req = ${ReqId}`,
      });
    }

    // 3. C·∫≠p nh·∫≠t tr·∫°ng th√°i v√† th·ªùi gian c·∫≠p nh·∫≠t
    await pool
      .request()
      .input("id_req", sql.Int, ReqId)
      .input("status", sql.NVarChar, status)
      .input("updated_at", sql.DateTime, new Date()).query(` 
        UPDATE Medication_Daily_Log 
        SET status = @status, 
            updated_at = @updated_at 
        WHERE id_req = @id_req
      `);

    const parentId = await pool
      .request()
      .input("id_req", sql.Int, ReqId)
      .query(`SELECT parent_id FROM Medication_Submisstion_Request WHERE id_req = @id_req`);

    if (status === "GIVEN") {
      sendNotification(
        pool,
        parentId.recordset[0].parent_id,
        "C·∫≠p nh·∫≠t tr·∫°ng th√°i u·ªëng thu·ªëc",
        "Y t√° ƒë√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i u·ªëng thu·ªëc cho h·ªçc sinh"
      );
    } else if (status === "NOT GIVEN") {
      sendNotification(
        pool,
        parentId.recordset[0].parent_id,
        "C·∫≠p nh·∫≠t tr·∫°ng th√°i u·ªëng thu·ªëc",
        "Y t√° ƒë√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i ch∆∞a cho h·ªçc sinh u·ªëng thu·ªëc"
      );
    }

    // 4. Tr·∫£ v·ªÅ ph·∫£n h·ªìi th√†nh c√¥ng
    res.status(200).json({
      status: "success",
      message: "Medication Daily Log status updated successfully",
    });
  } catch (error) {
    console.error("Error updating Medication Daily Log status:", error);
    res.status(500).json({
      status: "error",
      message: "Server error while updating Medication Daily Log status",
    });
  }
};

// H√†m ki·ªÉm tra v√† g·ª≠i email n·∫øu ch∆∞a c·∫≠p nh·∫≠t u·ªëng thu·ªëc
const checkUnupdatedMedicationLogs = async () => {
  try {
    const pool = await sqlServerPool;

    // Truy v·∫•n l·∫•y t·∫•t c·∫£ nh·∫≠t k√Ω h√¥m nay c√≥ status l√† 'PENDING' v√† ch∆∞a c√≥ ·∫£nh, sau 18:00
    const result = await pool.request().query(`
      SELECT 
          log.log_id,
          log.date,
          log.status,
          log.image_url,
          req.parent_id,
          u.full_name AS parent_name,
          u.email AS parent_email
      FROM Medication_Daily_Log log
      JOIN Medication_Submisstion_Request req ON log.id_req = req.id_req
      JOIN Users u ON req.parent_id = u.user_id
      WHERE 
          log.date = CAST(GETDATE() AS DATE) -- ch·ªâ l·∫•y b·∫£n ghi h√¥m nay
          AND log.status = 'PENDING'         -- y t√° ch∆∞a c·∫≠p nh·∫≠t tr·∫°ng th√°i
          AND log.image_url IS NULL          -- ch∆∞a c√≥ ·∫£nh x√°c nh·∫≠n
          AND CAST(GETDATE() AS TIME) > '18:00:00' -- ch·ªâ g·ª≠i sau 6 gi·ªù t·ªëi
    `);

    const logs = result.recordset; // Danh s√°ch k·∫øt qu·∫£ truy v·∫•n

    // L·∫∑p qua t·ª´ng b·∫£n ghi ƒë·ªÉ g·ª≠i email
    for (const log of logs) {
      const subject = "üîî C·∫£nh b√°o: Ch∆∞a c·∫≠p nh·∫≠t nh·∫≠t k√Ω u·ªëng thu·ªëc";

      const message =
        `K√≠nh g·ª≠i ph·ª• huynh ${log.parent_name},\n\n` +
        `Y t√° hi·ªán ch∆∞a c·∫≠p nh·∫≠t tr·∫°ng th√°i v√† ·∫£nh x√°c nh·∫≠n cho h·ªçc sinh v√†o ng√†y ${log.date}.\n` +
        `Vui l√≤ng ki·ªÉm tra ho·∫∑c li√™n h·ªá v·ªõi y t√° n·∫øu c·∫ßn thi·∫øt.\n
        \nTr√¢n tr·ªçng,
        \nPIEDTEAM üë®‚Äç‚öïÔ∏è`;

      // G·ª≠i email cho ph·ª• huynh
      await sendEmail(log.parent_email, subject, message);
    }

    // Ghi log sau khi x·ª≠ l√Ω xong
    console.log(`‚úÖ ƒê√£ g·ª≠i th√¥ng b√°o cho ${logs.length} ph·ª• huynh.`);
  } catch (error) {
    // X·ª≠ l√Ω l·ªói
    console.error("‚ùå L·ªói khi ki·ªÉm tra nh·∫≠t k√Ω thu·ªëc:", error);
  }
};

// H√†m l·∫•y nh·∫≠t k√Ω u·ªëng thu·ªëc theo ID y√™u c·∫ßu
const getLogsByRequestIdAndUserId = async (req, res) => {
  const user_id = req.user?.user_id;
  const { id_req } = req.params;
  const pool = await sqlServerPool;

  try {
    const result = await pool.request().input("id_req", sql.Int, id_req).input("nurse_id", sql.Int, user_id).query(`
        SELECT 
          log.*,
          stu.full_name,
          stu.class_name,
          u.fullname AS parent_name,
          u.phone AS parent_phone,
          u.email AS parent_email
        FROM Medication_Daily_Log log
        JOIN Medication_Submisstion_Request req ON log.id_req = req.id_req
        JOIN Student_Information stu ON req.student_id = stu.student_id
        JOIN Users u ON req.parent_id = u.user_id
        WHERE log.id_req = @id_req AND u.user_id = @user_id
        ORDER BY log.date ASC;
      `);

    res.status(200).json({ status: "success", data: result.recordset });
  } catch (err) {
    console.error("Error:", err);
    res.status(500).json({ status: "error", message: "Internal Server Error" });
  }
};

// H√†m l·∫•y nh·∫≠t k√Ω u·ªëng thu·ªëc theo ID y√™u c·∫ßu
const getLogsByRequestIdAndUserIdAndStudentId = async (req, res) => {
  const user_id = req.user?.user_id;
  const { id_req, student_id } = req.params;
  const pool = await sqlServerPool;
  try {
    const idReqInt = parseInt(id_req);
    const studentIdInt = parseInt(student_id);

    const result = await pool
      .request()
      .input("id_req", sql.Int, idReqInt)
      .input("user_id", sql.Int, user_id)
      .input("student_id", sql.Int, studentIdInt).query(`
        SELECT 
          log.*,
          stu.full_name,
          stu.class_name,
          u.fullname AS parent_name,
          u.phone AS parent_phone,
          u.email AS parent_email
        FROM Medication_Daily_Log log
        JOIN Medication_Submisstion_Request req ON log.id_req = req.id_req
        JOIN Student_Information stu ON req.student_id = stu.student_id
        JOIN Users u ON req.parent_id = u.user_id
        WHERE log.id_req = @id_req AND u.user_id = @user_id AND req.student_id = @student_id
        ORDER BY log.date ASC;
      `);

    if (result.recordset.length === 0) {
      return res.status(404).json({
        status: "not_found",
        message: "Kh√¥ng t√¨m th·∫•y log n√†o cho y√™u c·∫ßu n√†y.",
      });
    }

    res.status(200).json({ status: "success", data: result.recordset });
  } catch (err) {
    console.error("Error:", err);
    res.status(500).json({ status: "error", message: "Internal Server Error" });
  }
};

// H√†m l·∫•y nh·∫≠t k√Ω u·ªëng thu·ªëc theo ID nh·∫≠t k√Ω
const getLogByLogId = async (req, res) => {
  const { log_id } = req.params; // v√≠ d·ª•: /api/logs/1l;

  try {
    const result = await pool.request().input("log_id", sql.Int, log_id).query(`
        SELECT 
          log.*,
          stu.full_name,
          stu.class_name,
          u.fullname AS parent_name,
          u.phone AS parent_phone,
          u.email AS parent_email
        FROM Medication_Daily_Log log
        JOIN Medication_Submisstion_Request req ON log.id_req = req.id_req
        JOIN Student_Information stu ON req.student_id = stu.student_id
        JOIN Users u ON req.parent_id = u.user_id
        WHERE log.log_id = @log_id;
      `);

    if (result.recordset.length > 0) {
      res.status(200).json({ status: "success", data: result.recordset[0] });
    } else {
      res.status(404).json({ status: "fail", message: "Log not found" });
    }
  } catch (err) {
    console.error("Error:", err);
    res.status(500).json({ status: "error", message: "Internal Server Error" });
  }
};

// H√†m l·∫•y nh·∫≠t k√Ω u·ªëng thu·ªëc theo ng√†y v√† ID y t√°
const getLogsByDateAndNurse = async (req, res) => {
  const nurse_id = req.user?.user_id;
  const { date } = req.body;
  const pool = await sqlServerPool;

  try {
    const result = await pool.request().input("log_date", sql.Date, date).input("nurse_id", sql.Int, nurse_id).query(`
        SELECT 
          log.*,
          stu.full_name,
          stu.class_name,
          u.fullname AS parent_name,
          u.phone AS parent_phone,
          u.email AS parent_email
        FROM Medication_Daily_Log log
        JOIN Medication_Submisstion_Request req ON log.id_req = req.id_req
        JOIN Student_Information stu ON req.student_id = stu.student_id
        JOIN Users u ON req.parent_id = u.user_id
        WHERE CAST(log.date AS DATE) = @log_date AND log.nurse_id = @nurse_id
        ORDER BY log.date ASC;
      `);

    res.status(200).json({ status: "success", data: result.recordset });
  } catch (err) {
    console.error("Error:", err);
    res.status(500).json({ status: "error", message: "Internal Server Error" });
  }
};

// Export c√°c controller ra module
module.exports = {
  updateStatusMedicationDailyLog,
  checkUnupdatedMedicationLogs,
  getLogsByRequestIdAndUserId,
  getLogByLogId,
  getLogsByDateAndNurse,
  getLogsByRequestIdAndUserIdAndStudentId,
};
