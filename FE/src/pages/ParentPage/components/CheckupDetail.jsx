import React, { useState } from "react";
import { Modal, Descriptions, Tag, Button, Form, Radio, Input } from "antd";
import moment from "moment";
import { useDispatch, useSelector } from "react-redux";
import { respondToCheckupConsent } from "../../../redux/parent/parentSlice";
import { CheckCircleOutlined, CloseCircleOutlined } from "@ant-design/icons";
import { toast } from "react-toastify";

const { TextArea } = Input;

const getStatusTag = (status) => {
  switch (status) {
    case "PENDING":
      return <Tag color="processing">ƒêang ch·ªù ph·∫£n h·ªìi</Tag>;
    case "AGREED":
      return <Tag color="success">ƒê√£ ƒë·ªìng √Ω</Tag>;
    case "DECLINED":
      return <Tag color="error">ƒê√£ t·ª´ ch·ªëi</Tag>;
    default:
      return <Tag color="default">Kh√¥ng r√µ</Tag>;
  }
};

const CheckupDetail = ({ visible, onClose, checkup, onSuccess }) => {
  const dispatch = useDispatch();
  const { selectedChild } = useSelector((state) => state.parent);
  const accessToken = localStorage.getItem("accessToken");

  const [resendVisible, setResendVisible] = useState(false);
  const [form] = Form.useForm();
  const [loading, setLoading] = useState(false);

  const handleResendConsent = async (values) => {
    try {
      setLoading(true);
      await dispatch(
        respondToCheckupConsent({
          formId: checkup.form_id,
          studentId: selectedChild?.student_id,
          accessToken,
          status: values.status,
          note: values.note,
        })
      ).unwrap();
      toast.success("G·ª≠i l·∫°i ph·∫£n h·ªìi th√†nh c√¥ng!");
      setResendVisible(false);
      onSuccess?.();
      onClose();
    } catch (err) {
      toast.error("G·ª≠i l·∫°i ph·∫£n h·ªìi th·∫•t b·∫°i!");
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  if (!checkup) return null;

  return (
    <>
      <Modal
        title="Chi ti·∫øt ƒë·ª£t kh√°m"
        open={visible}
        onCancel={onClose}
        footer={[
          checkup.status !== "PENDING" && (
            <Button key="resend" onClick={() => setResendVisible(true)}>
              G·ª≠i l·∫°i y√™u c·∫ßu
            </Button>
          ),
          <Button onClick={onClose} key="close">
            ƒê√≥ng
          </Button>,
        ]}
        centered
      >
        <Descriptions column={1} bordered size="middle">
          <Descriptions.Item label="üìå T√™n ƒë·ª£t kh√°m">
            {checkup.title}
          </Descriptions.Item>
          <Descriptions.Item label="üë¶ H·ªçc sinh">
            {checkup.full_name}
          </Descriptions.Item>
          <Descriptions.Item label="üè´ L·ªõp">
            {checkup.class_name || "Kh√¥ng r√µ"}
          </Descriptions.Item>
          <Descriptions.Item label="üìù M√¥ t·∫£">
            {checkup.description}
          </Descriptions.Item>
          <Descriptions.Item label="üìÖ Ng√†y kh√°m">
            {moment(checkup.scheduled_date).format("DD/MM/YYYY")}
          </Descriptions.Item>
          <Descriptions.Item label="üí∞ Nh√† t√†i tr·ª£">
            {checkup.sponsor || "Kh√¥ng c√≥"}
          </Descriptions.Item>
          <Descriptions.Item label="üì§ Tr·∫°ng th√°i ph·∫£n h·ªìi">
            {getStatusTag(checkup.status)}
          </Descriptions.Item>
          <Descriptions.Item label="üì§ Ghi ch√∫">
            {checkup.note ? checkup.note : "Kh√¥ng c√≥ ghi ch√∫ g√¨"}
          </Descriptions.Item>
        </Descriptions>
      </Modal>

      {/* G·ªôp modal ph·∫£n h·ªìi l·∫°i y√™u c·∫ßu */}
      <Modal
        title="Ph·∫£n h·ªìi l·∫°i y√™u c·∫ßu kh√°m s·ª©c kh·ªèe"
        open={resendVisible}
        onCancel={() => setResendVisible(false)}
        footer={null}
        centered
      >
        <Form
          form={form}
          layout="vertical"
          onFinish={handleResendConsent}
          name="resendConsentForm"
        >
          <Form.Item
            name="status"
            label="Quy·∫øt ƒë·ªãnh c·ªßa b·∫°n"
            rules={[{ required: true, message: "Vui l√≤ng ch·ªçn quy·∫øt ƒë·ªãnh" }]}
          >
            <Radio.Group>
              <Radio value="AGREED">
                <CheckCircleOutlined style={{ color: "#52c41a" }} /> ƒê·ªìng √Ω cho
                con tham gia kh√°m s·ª©c kh·ªèe
              </Radio>
              <Radio value="DECLINED">
                <CloseCircleOutlined style={{ color: "#f5222d" }} /> Kh√¥ng ƒë·ªìng
                √Ω cho con tham gia kh√°m s·ª©c kh·ªèe
              </Radio>
            </Radio.Group>
          </Form.Item>

          <Form.Item name="note" label="Ghi ch√∫ (n·∫øu c√≥)">
            <TextArea rows={4} placeholder="Nh·∫≠p ghi ch√∫ ho·∫∑c l√Ω do (n·∫øu c√≥)" />
          </Form.Item>

          <Form.Item>
            <div style={{ textAlign: "right" }}>
              <Button
                style={{ marginRight: 8 }}
                onClick={() => setResendVisible(false)}
              >
                H·ªßy
              </Button>
              <Button type="primary" htmlType="submit" loading={loading}>
                G·ª≠i ph·∫£n h·ªìi
              </Button>
            </div>
          </Form.Item>
        </Form>
      </Modal>
    </>
  );
};

export default CheckupDetail;
