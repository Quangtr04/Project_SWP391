import React, { useState } from "react";
import "./App.css";

// Temporary simple components until we create separate files
const Header = ({ currentPage, setCurrentPage }) => {
  const [showUserMenu, setShowUserMenu] = useState(false);

  return (
    <header className="header">
      <div className="header-container">
        <div className="logo">
          <span>üè• S·ª©c kh·ªèe gia ƒë√¨nh</span>
        </div>

        <nav className="nav-menu">
          <button
            className={currentPage === "home" ? "nav-item active" : "nav-item"}
            onClick={() => setCurrentPage("home")}
          >
            Trang ch·ªß
          </button>
          <button
            className={
              currentPage === "medical" ? "nav-item active" : "nav-item"
            }
            onClick={() => setCurrentPage("medical")}
          >
            Gi·ªõi thi·ªáu tr∆∞·ªùng h·ªçc
          </button>
          <button
            className={
              currentPage === "health-declaration"
                ? "nav-item active"
                : "nav-item"
            }
            onClick={() => setCurrentPage("health-declaration")}
          >
            Khai b√°o s·ª©c kh·ªèe
          </button>
          <button className="nav-item">Blog chia s·∫ª</button>
          <button className="nav-item">H·ªó tr·ª£</button>
        </nav>

        <div className="header-actions">
          <button
            className="btn-primary"
            onClick={() => setCurrentPage("appointment")}
          >
            ƒê·∫∑t l·ªãch h·∫πn
          </button>
          <div className="user-menu-container">
            <div
              className="user-menu"
              onClick={() => setShowUserMenu(!showUserMenu)}
            >
              <span>üë§</span>
            </div>
            {showUserMenu && (
              <div className="user-dropdown">
                <button
                  className="dropdown-item"
                  onClick={() => {
                    setCurrentPage("profile");
                    setShowUserMenu(false);
                  }}
                >
                  üë§ H·ªì s∆° c·ªßa t√¥i
                </button>
                <button className="dropdown-item">‚öôÔ∏è C√†i ƒë·∫∑t</button>
                <button className="dropdown-item">üö™ ƒêƒÉng xu·∫•t</button>
              </div>
            )}
          </div>
        </div>
      </div>
    </header>
  );
};

const HomePage = () => {
  const [showMedicineModal, setShowMedicineModal] = useState(false);
  const [selectedChild, setSelectedChild] = useState(0);

  // D·ªØ li·ªáu c√°c con
  const children = [
    {
      id: 1,
      name: "Nguy·ªÖn VƒÉn An",
      age: 7,
      class: "2A2",
      avatar: "üë¶",
      health: {
        height: "125 cm",
        weight: "26 kg",
        status: "B√¨nh th∆∞·ªùng",
      },
      medicines: [
        {
          id: 1,
          name: "Vitamin t·ªïng h·ª£p",
          dosage: "1 vi√™n m·ªói s√°ng sau b·ªØa ƒÉn",
          remaining: "20 vi√™n",
          type: "üíä",
        },
        {
          id: 2,
          name: "Thu·ªëc d·ªã ·ª©ng",
          dosage: "Khi c√≥ tri·ªáu ch·ª©ng d·ªã ·ª©ng",
          remaining: "5 vi√™n",
          type: "üß¥",
        },
      ],
      notifications: [
        {
          id: 1,
          type: "warning",
          title: "X√°c nh·∫≠n ti√™m v·∫Øc-xin MMR",
          content:
            "Vui l√≤ng x√°c nh·∫≠n cho Nguy·ªÖn VƒÉn An ti√™m ch·ªßng v·∫Øc-xin MMR t·∫°i tr∆∞·ªùng v√†o ng√†y 10/06/2023.",
          deadline: "05/06/2023",
        },
        {
          id: 2,
          type: "info",
          title: "Ki·ªÉm tra s·ª©c kh·ªèe ƒë·ªãnh k·ª≥",
          content:
            "L·ªãch ki·ªÉm tra s·ª©c kh·ªèe ƒë·ªãnh k·ª≥ cho Nguy·ªÖn VƒÉn An t·∫°i tr∆∞·ªùng v√†o ng√†y 15/06/2023.",
          deadline: "10/06/2023",
        },
      ],
      schedule: [
        {
          id: 1,
          title: "V·∫Øc-xin MMR (S·ªüi, Quai b·ªã, Rubella)",
          date: "10/06/2023",
          location: "T·∫°i tr∆∞·ªùng h·ªçc",
        },
      ],
    },
    {
      id: 2,
      name: "Nguy·ªÖn Th·ªã B√¨nh",
      age: 5,
      class: "K√≠ch",
      avatar: "üëß",
      health: {
        height: "108 cm",
        weight: "18 kg",
        status: "B√¨nh th∆∞·ªùng",
      },
      medicines: [
        {
          id: 3,
          name: "Vitamin D3",
          dosage: "2 gi·ªçt m·ªói ng√†y",
          remaining: "50 ml",
          type: "üß¥",
        },
      ],
      notifications: [
        {
          id: 3,
          type: "info",
          title: "Kh√°m rƒÉng ƒë·ªãnh k·ª≥",
          content:
            "L·ªãch kh√°m rƒÉng ƒë·ªãnh k·ª≥ cho Nguy·ªÖn Th·ªã B√¨nh t·∫°i ph√≤ng y t·∫ø tr∆∞·ªùng v√†o ng√†y 20/06/2023.",
          deadline: "15/06/2023",
        },
      ],
      schedule: [
        {
          id: 2,
          title: "Kh√°m rƒÉng ƒë·ªãnh k·ª≥",
          date: "20/06/2023",
          location: "Ph√≤ng y t·∫ø tr∆∞·ªùng",
        },
      ],
    },
  ];

  const [medicines, setMedicines] = useState(children[selectedChild].medicines);

  const [medicineForm, setMedicineForm] = useState({
    name: "",
    type: "üíä",
    dosage: "",
    instructions: "",
    quantity: "",
    expiry: "",
    notes: "",
  });

  // C·∫≠p nh·∫≠t medicines khi ch·ªçn con kh√°c
  const handleChildSelect = (index) => {
    setSelectedChild(index);
    setMedicines(children[index].medicines);
  };

  const handleMedicineFormChange = (e) => {
    setMedicineForm({
      ...medicineForm,
      [e.target.name]: e.target.value,
    });
  };

  const handleSubmitMedicine = (e) => {
    e.preventDefault();
    const newMedicine = {
      id: Date.now(),
      name: medicineForm.name,
      dosage: medicineForm.instructions,
      remaining: `${medicineForm.quantity} vi√™n`,
      type: medicineForm.type,
    };

    const updatedMedicines = [...medicines, newMedicine];
    setMedicines(updatedMedicines);

    // C·∫≠p nh·∫≠t d·ªØ li·ªáu cho con ƒë∆∞·ª£c ch·ªçn
    children[selectedChild].medicines = updatedMedicines;

    setMedicineForm({
      name: "",
      type: "üíä",
      dosage: "",
      instructions: "",
      quantity: "",
      expiry: "",
      notes: "",
    });
    setShowMedicineModal(false);
    alert("ƒê√£ g·ª≠i th√¥ng tin thu·ªëc cho tr∆∞·ªùng th√†nh c√¥ng!");
  };

  const removeMedicine = (id) => {
    const updatedMedicines = medicines.filter((med) => med.id !== id);
    setMedicines(updatedMedicines);
    children[selectedChild].medicines = updatedMedicines;
  };

  const currentChild = children[selectedChild];

  return (
    <div className="medical-page">
      <div className="container">
        <div className="welcome-section">
          <h1>Xin ch√†o, Nguy·ªÖn Th·ªã Hoa!</h1>
          <p>Ch√†o m·ª´ng ƒë·∫øn v·ªõi trang qu·∫£n l√Ω s·ª©c kh·ªèe cho b·∫°n</p>

          <div className="action-buttons">
            <button
              className="btn-primary"
              onClick={() => window.App.setCurrentPage("health-declaration")}
            >
              üóíÔ∏è Khai b√°o s·ª©c kh·ªèe
            </button>
            <button
              className="btn-secondary"
              onClick={() => setShowMedicineModal(true)}
            >
              üíä G·ª≠i thu·ªëc cho tr∆∞·ªùng
            </button>
          </div>
        </div>

        <div className="children-section">
          <h2>Ch·ªçn con c·ªßa b·∫°n</h2>
          <div className="children-cards">
            {children.map((child, index) => (
              <div
                key={child.id}
                className={`child-card ${
                  index === selectedChild ? "active" : ""
                }`}
                onClick={() => handleChildSelect(index)}
              >
                <span className="child-icon">{child.avatar}</span>
                <div>
                  <h4>
                    {child.name} ({child.age} tu·ªïi)
                  </h4>
                  <p>L·ªõp {child.class}</p>
                </div>
              </div>
            ))}
          </div>
        </div>

        <div className="current-child-info">
          <h2>Th√¥ng tin s·ª©c kh·ªèe - {currentChild.name}</h2>
        </div>

        <div className="content-grid">
          <div className="left-column">
            <div className="health-info">
              <h3>S·ª©c kh·ªèe c·ªßa {currentChild.name}</h3>
              <div className="health-stats">
                <div className="stat">
                  <label>Chi·ªÅu cao</label>
                  <div className="stat-value">
                    <strong>{currentChild.health.height}</strong>
                    <span className="normal">{currentChild.health.status}</span>
                  </div>
                </div>
                <div className="stat">
                  <label>C√¢n n·∫∑ng</label>
                  <div className="stat-value">
                    <strong>{currentChild.health.weight}</strong>
                    <span className="normal">{currentChild.health.status}</span>
                  </div>
                </div>
              </div>
            </div>

            <div className="medications">
              <h3>Thu·ªëc ƒë√£ g·ª≠i cho tr∆∞·ªùng</h3>
              {medicines.length > 0 ? (
                medicines.map((medicine) => (
                  <div key={medicine.id} className="medication-item">
                    <div className="med-icon">{medicine.type}</div>
                    <div className="med-info">
                      <h4>{medicine.name}</h4>
                      <p>{medicine.dosage}</p>
                      <span className="med-status">
                        C√≤n {medicine.remaining}
                      </span>
                    </div>
                    <button
                      className="btn-remove"
                      onClick={() => removeMedicine(medicine.id)}
                    >
                      ‚ùå
                    </button>
                  </div>
                ))
              ) : (
                <div className="empty-state">
                  <p>Ch∆∞a c√≥ thu·ªëc n√†o ƒë∆∞·ª£c g·ª≠i cho tr∆∞·ªùng</p>
                </div>
              )}
              <button
                className="btn-add"
                onClick={() => setShowMedicineModal(true)}
              >
                + G·ª≠i th√™m thu·ªëc cho {currentChild.name}
              </button>
            </div>
          </div>

          <div className="right-column">
            <div className="notifications">
              <h3>Th√¥ng b√°o & Y√™u c·∫ßu c·∫ßn x√°c nh·∫≠n</h3>
              {currentChild.notifications.length > 0 ? (
                currentChild.notifications.map((notification) => (
                  <div key={notification.id} className="notification-item">
                    <div className={`notif-icon ${notification.type}`}>
                      {notification.type === "warning" ? "‚ö†Ô∏è" : "‚ÑπÔ∏è"}
                    </div>
                    <div className="notif-content">
                      <h4>{notification.title}</h4>
                      <p>{notification.content}</p>
                      <span className="time">
                        H·∫°n x√°c nh·∫≠n: {notification.deadline}
                      </span>
                    </div>
                  </div>
                ))
              ) : (
                <div className="empty-state">
                  <p>Kh√¥ng c√≥ th√¥ng b√°o n√†o</p>
                </div>
              )}
            </div>

            <div className="schedule">
              <h3>L·ªãch ti√™m ch·ªßng s·∫Øp t·ªõi</h3>
              {currentChild.schedule.length > 0 ? (
                currentChild.schedule.map((item) => (
                  <div key={item.id} className="schedule-item">
                    <div className="schedule-icon">üíâ</div>
                    <div className="schedule-info">
                      <h4>{item.title}</h4>
                      <p>
                        Ng√†y {item.date} - {item.location}
                      </p>
                      <div className="schedule-actions">
                        <button className="btn-confirm">X√°c nh·∫≠n</button>
                        <button className="btn-view">Xem</button>
                      </div>
                    </div>
                  </div>
                ))
              ) : (
                <div className="empty-state">
                  <p>Kh√¥ng c√≥ l·ªãch ti√™m ch·ªßng n√†o</p>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>

      {/* Medicine Modal */}
      {showMedicineModal && (
        <div
          className="modal-overlay"
          onClick={() => setShowMedicineModal(false)}
        >
          <div
            className="modal-content medicine-modal"
            onClick={(e) => e.stopPropagation()}
          >
            <div className="modal-header">
              <div className="breadcrumb">
                <span>Trang ch·ªß</span> / <span>G·ª≠i thu·ªëc cho tr∆∞·ªùng</span>
              </div>
              <button
                className="close-btn"
                onClick={() => setShowMedicineModal(false)}
              >
                ‚úï
              </button>
            </div>

            <div className="modal-body">
              <h1 className="page-title">G·ª≠i thu·ªëc cho tr∆∞·ªùng</h1>
              <p className="page-subtitle">
                ‚ÑπÔ∏è Xin l∆∞u √Ω r·∫±ng b·ªô ƒê·ªïi C√¥ng n√†y ƒë·ªÉ g·ª≠i y√™u c·∫ßu cho gi√°o vi√™n
                nh·∫≠n thu·ªëc, ƒë·ªìng th·ªùi.
              </p>

              <form onSubmit={handleSubmitMedicine} className="medicine-form">
                <div className="form-section">
                  <h3>1. Th√¥ng tin v·ªÅ thu·ªëc</h3>

                  <div className="form-grid">
                    <div className="form-group">
                      <label>
                        T√™n thu·ªëc <span className="required">*</span>
                      </label>
                      <input
                        type="text"
                        name="name"
                        value={medicineForm.name}
                        onChange={handleMedicineFormChange}
                        placeholder="VD: Paracetamol 500mg"
                        required
                      />
                    </div>

                    <div className="form-group">
                      <label>ƒê∆°n v·ªã</label>
                      <select
                        name="unit"
                        value={medicineForm.unit || "Vi√™n"}
                        onChange={handleMedicineFormChange}
                      >
                        <option value="Vi√™n">Vi√™n</option>
                        <option value="ml">ml</option>
                        <option value="G√≥i">G√≥i</option>
                        <option value="·ªêng">·ªêng</option>
                      </select>
                    </div>

                    <div className="form-group">
                      <label>
                        Lo·∫°i thu·ªëc <span className="required">*</span>
                      </label>
                      <select
                        name="type"
                        value={medicineForm.type}
                        onChange={handleMedicineFormChange}
                        required
                      >
                        <option value="">Ch·ªçn lo·∫°i thu·ªëc</option>
                        <option value="üíä">üíä Thu·ªëc vi√™n</option>
                        <option value="üß¥">üß¥ Thu·ªëc n∆∞·ªõc</option>
                        <option value="üíâ">üíâ Thu·ªëc ti√™m</option>
                        <option value="ü©π">ü©π Thu·ªëc b√¥i ngo√†i</option>
                      </select>
                    </div>

                    <div className="form-group">
                      <label>
                        Li·ªÅu l∆∞·ª£ng <span className="required">*</span>
                      </label>
                      <input
                        type="text"
                        name="dosage"
                        value={medicineForm.dosage}
                        onChange={handleMedicineFormChange}
                        placeholder="VD: 1 vi√™n"
                        required
                      />
                    </div>

                    <div className="form-group">
                      <label>
                        C√°ch th·ª©c d√πng <span className="required">*</span>
                      </label>
                      <input
                        type="text"
                        name="instructions"
                        value={medicineForm.instructions}
                        onChange={handleMedicineFormChange}
                        placeholder="VD: U·ªëng sau b·ªØa ƒÉn"
                        required
                      />
                    </div>

                    <div className="form-group">
                      <label>
                        S·ªë l∆∞·ª£ng g·ª≠i ƒë·∫øn tr∆∞·ªùng{" "}
                        <span className="required">*</span>
                      </label>
                      <input
                        type="number"
                        name="quantity"
                        value={medicineForm.quantity}
                        onChange={handleMedicineFormChange}
                        placeholder="VD: 10"
                        required
                      />
                    </div>
                  </div>
                </div>

                <div className="form-section">
                  <h3>2. Th·ªùi gian s·ª≠ d·ª•ng</h3>

                  <div className="form-grid">
                    <div className="form-group">
                      <label>
                        Ng√†y b·∫Øt ƒë·∫ßu d√πng <span className="required">*</span>
                      </label>
                      <input
                        type="date"
                        name="startDate"
                        value={medicineForm.startDate || ""}
                        onChange={handleMedicineFormChange}
                        required
                      />
                    </div>

                    <div className="form-group">
                      <label>Ng√†y k·∫øt th√∫c d√πng</label>
                      <input
                        type="date"
                        name="endDate"
                        value={medicineForm.endDate || ""}
                        onChange={handleMedicineFormChange}
                      />
                    </div>

                    <div className="form-group full-width">
                      <label>Ghi ch√∫ v·ªÅ c√°ch s·ª≠ d·ª•ng</label>
                      <textarea
                        name="notes"
                        value={medicineForm.notes}
                        onChange={handleMedicineFormChange}
                        placeholder="VD: Ch·ªâ cho u·ªëng khi c√≥ tri·ªáu ch·ª©ng s·ªët tr√™n 38.5¬∞C. Kh√¥ng cho u·ªëng qu√° 3 l·∫ßn trong ng√†y."
                        rows="4"
                      />
                    </div>
                  </div>
                </div>

                <div className="form-section">
                  <h3>3. L∆∞u √Ω ƒë·∫∑c bi·ªát</h3>

                  <div className="info-box warning">
                    <h4>‚ö†Ô∏è L∆∞u √Ω quan tr·ªçng:</h4>
                    <ul>
                      <li>Thu·ªëc ph·∫£i c√≤n h·∫°n s·ª≠ d·ª•ng √≠t nh·∫•t 30 ng√†y</li>
                      <li>Bao b√¨ thu·ªëc ph·∫£i nguy√™n v·∫πn, c√≥ nh√£n m√°c r√µ r√†ng</li>
                      <li>
                        Cung c·∫•p ƒë·∫ßy ƒë·ªß th√¥ng tin v·ªÅ li·ªÅu l∆∞·ª£ng v√† c√°ch s·ª≠ d·ª•ng
                      </li>
                      <li>
                        Th√¥ng b√°o cho gi√°o vi√™n v·ªÅ t√°c d·ª•ng ph·ª• c√≥ th·ªÉ x·∫£y ra
                      </li>
                      <li>
                        ƒê∆°n thu·ªëc/toa thu·ªëc t·ª´ b√°c sƒ© (n·∫øu c√≥) c·∫ßn ƒë∆∞·ª£c ƒë√≠nh k√®m
                      </li>
                    </ul>
                  </div>

                  <div className="form-group full-width">
                    <label className="checkbox-label">
                      <input type="checkbox" name="agreement" required />
                      <span className="checkmark"></span>
                      <span>
                        T√¥i cam ƒëoan th√¥ng tin tr√™n l√† ch√≠nh x√°c v√† ch·ªãu tr√°ch
                        nhi·ªám v·ªÅ vi·ªác s·ª≠ d·ª•ng thu·ªëc cho con
                      </span>
                    </label>
                  </div>
                </div>

                <div className="form-actions">
                  <button
                    type="button"
                    className="btn-cancel"
                    onClick={() => setShowMedicineModal(false)}
                  >
                    H·ªßy b·ªè
                  </button>
                  <button type="submit" className="btn-submit">
                    üóíÔ∏è G·ª≠i thu·ªëc cho tr∆∞·ªùng
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

const AppointmentPage = () => {
  const [showNewAppointmentModal, setShowNewAppointmentModal] = useState(false);
  const [selectedChild, setSelectedChild] = useState(0);
  const [activeTab, setActiveTab] = useState("upcoming");

  // D·ªØ li·ªáu c√°c con
  const children = [
    {
      id: 1,
      name: "Nguy·ªÖn Minh Anh",
      age: 7,
      class: "2A2",
      avatar: "üë¶",
    },
    {
      id: 2,
      name: "Nguy·ªÖn Th·ªã B√¨nh",
      age: 5,
      class: "K√≠ch",
      avatar: "üëß",
    },
  ];

  // D·ªØ li·ªáu l·ªãch h·∫πn
  const [appointments, setAppointments] = useState([
    {
      id: 1,
      date: "15/05/2023",
      time: "14:30 - 15:00",
      studentName: "Nguy·ªÖn Minh Anh",
      issue: "T∆∞ v·∫•n ƒë·ªãnh h∆∞·ªõng ngh·ªÅ nghi·ªáp",
      status: "confirmed",
      statusText: "ƒê√£ x√°c nh·∫≠n",
    },
    {
      id: 2,
      date: "22/05/2023",
      time: "10:00 - 10:30",
      studentName: "Nguy·ªÖn Minh Anh",
      issue: "T∆∞ v·∫•n k·∫øt qu·∫£ h·ªçc t·∫≠p h·ªçc k·ª≥ I",
      status: "pending",
      statusText: "Ch·ªù x√°c nh·∫≠n",
    },
  ]);

  const [appointmentForm, setAppointmentForm] = useState({
    studentId: "",
    date: "",
    time: "",
    issue: "",
    description: "",
    contactMethod: "phone",
    urgency: "normal",
  });

  const handleFormChange = (e) => {
    setAppointmentForm({
      ...appointmentForm,
      [e.target.name]: e.target.value,
    });
  };

  const handleSubmitAppointment = (e) => {
    e.preventDefault();
    const selectedStudent = children.find(
      (child) => child.id == appointmentForm.studentId
    );
    const newAppointment = {
      id: Date.now(),
      date: new Date(appointmentForm.date).toLocaleDateString("vi-VN"),
      time: appointmentForm.time,
      studentName: selectedStudent?.name || "",
      issue: appointmentForm.issue,
      status: "pending",
      statusText: "Ch·ªù x√°c nh·∫≠n",
    };

    setAppointments([...appointments, newAppointment]);
    setAppointmentForm({
      studentId: "",
      date: "",
      time: "",
      issue: "",
      description: "",
      contactMethod: "phone",
      urgency: "normal",
    });
    setShowNewAppointmentModal(false);
    alert("ƒê√£ g·ª≠i y√™u c·∫ßu ƒë·∫∑t l·ªãch h·∫πn th√†nh c√¥ng!");
  };

  const upcomingAppointments = appointments.filter(
    (apt) => apt.status !== "completed"
  );
  const pastAppointments = appointments.filter(
    (apt) => apt.status === "completed"
  );

  return (
    <div className="appointment-page">
      <div className="container">
        <div className="page-header">
          <div className="breadcrumb">
            <span>Trang ch·ªß</span> / <span>L·ªãch h·∫πn T∆∞ v·∫•n</span>
          </div>
          <h1>L·ªãch h·∫πn T∆∞ v·∫•n c·ªßa con</h1>
          <p>Qu·∫£n l√Ω v√† theo d√µi c√°c cu·ªôc h·∫πn t∆∞ v·∫•n v·ªõi nh√† tr∆∞·ªùng</p>
        </div>

        <div className="appointment-actions">
          <button
            className="btn-primary"
            onClick={() => setShowNewAppointmentModal(true)}
          >
            + Y√™u c·∫ßu ƒë·∫∑t l·ªãch h·∫πn m·ªõi
          </button>
        </div>

        <div className="appointment-tabs">
          <button
            className={`tab-btn ${activeTab === "upcoming" ? "active" : ""}`}
            onClick={() => setActiveTab("upcoming")}
          >
            C√°c cu·ªôc h·∫πn s·∫Øp t·ªõi
          </button>
          <button
            className={`tab-btn ${activeTab === "past" ? "active" : ""}`}
            onClick={() => setActiveTab("past")}
          >
            L·ªãch s·ª≠ c√°c cu·ªôc h·∫πn ƒë√£ qua
          </button>
        </div>

        <div className="appointments-content">
          {activeTab === "upcoming" && (
            <div className="appointments-table">
              <table>
                <thead>
                  <tr>
                    <th>NG√ÄY</th>
                    <th>GI·ªú</th>
                    <th>H·ªåC SINH</th>
                    <th>V·∫§N ƒê·ªÄ T∆Ø V·∫§N</th>
                    <th>TR·∫†NG TH√ÅI</th>
                    <th>THAO T√ÅC</th>
                  </tr>
                </thead>
                <tbody>
                  {upcomingAppointments.length > 0 ? (
                    upcomingAppointments.map((appointment) => (
                      <tr key={appointment.id}>
                        <td>{appointment.date}</td>
                        <td>{appointment.time}</td>
                        <td>{appointment.studentName}</td>
                        <td>{appointment.issue}</td>
                        <td>
                          <span
                            className={`status-badge ${appointment.status}`}
                          >
                            {appointment.statusText}
                          </span>
                        </td>
                        <td>
                          <button className="btn-view-detail">
                            üëÅÔ∏è Xem chi ti·∫øt
                          </button>
                        </td>
                      </tr>
                    ))
                  ) : (
                    <tr>
                      <td colSpan="6" className="no-data">
                        Kh√¥ng c√≥ cu·ªôc h·∫πn n√†o
                      </td>
                    </tr>
                  )}
                </tbody>
              </table>
              {upcomingAppointments.length > 0 && (
                <div className="table-footer">
                  <p>
                    Hi·ªÉn th·ªã {upcomingAppointments.length} tr√™n t·ªïng s·ªë{" "}
                    {upcomingAppointments.length} cu·ªôc h·∫πn
                  </p>
                </div>
              )}
            </div>
          )}

          {activeTab === "past" && (
            <div className="appointments-table">
              <table>
                <thead>
                  <tr>
                    <th>NG√ÄY</th>
                    <th>GI·ªú</th>
                    <th>H·ªåC SINH</th>
                    <th>V·∫§N ƒê·ªÄ T∆Ø V·∫§N</th>
                    <th>TR·∫†NG TH√ÅI</th>
                    <th>THAO T√ÅC</th>
                  </tr>
                </thead>
                <tbody>
                  {pastAppointments.length > 0 ? (
                    pastAppointments.map((appointment) => (
                      <tr key={appointment.id}>
                        <td>{appointment.date}</td>
                        <td>{appointment.time}</td>
                        <td>{appointment.studentName}</td>
                        <td>{appointment.issue}</td>
                        <td>
                          <span
                            className={`status-badge ${appointment.status}`}
                          >
                            {appointment.statusText}
                          </span>
                        </td>
                        <td>
                          <button className="btn-view-detail">
                            üëÅÔ∏è Xem chi ti·∫øt
                          </button>
                        </td>
                      </tr>
                    ))
                  ) : (
                    <tr>
                      <td colSpan="6" className="no-data">
                        Ch∆∞a c√≥ cu·ªôc h·∫πn n√†o ƒë√£ ho√†n th√†nh
                      </td>
                    </tr>
                  )}
                </tbody>
              </table>
            </div>
          )}
        </div>
      </div>

      {/* New Appointment Modal */}
      {showNewAppointmentModal && (
        <div
          className="modal-overlay"
          onClick={() => setShowNewAppointmentModal(false)}
        >
          <div
            className="modal-content appointment-modal"
            onClick={(e) => e.stopPropagation()}
          >
            <div className="modal-header">
              <div className="breadcrumb">
                <span>L·ªãch h·∫πn T∆∞ v·∫•n</span> / <span>ƒê·∫∑t l·ªãch h·∫πn m·ªõi</span>
              </div>
              <button
                className="close-btn"
                onClick={() => setShowNewAppointmentModal(false)}
              >
                ‚úï
              </button>
            </div>

            <div className="modal-body">
              <h1 className="page-title">ƒê·∫∑t l·ªãch h·∫πn T∆∞ v·∫•n</h1>
              <p className="page-subtitle">
                üìÖ Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin ƒë·ªÉ ƒë·∫∑t l·ªãch h·∫πn t∆∞ v·∫•n v·ªõi
                gi√°o vi√™n
              </p>

              <form
                onSubmit={handleSubmitAppointment}
                className="appointment-form"
              >
                <div className="form-section">
                  <h3>üìã Th√¥ng tin c∆° b·∫£n</h3>
                  <div className="form-grid">
                    <div className="form-group">
                      <label>
                        Ch·ªçn con <span className="required">*</span>
                      </label>
                      <select
                        name="studentId"
                        value={appointmentForm.studentId}
                        onChange={handleFormChange}
                        required
                      >
                        <option value="">Ch·ªçn con c·ªßa b·∫°n</option>
                        {children.map((child) => (
                          <option key={child.id} value={child.id}>
                            {child.name} - L·ªõp {child.class}
                          </option>
                        ))}
                      </select>
                    </div>

                    <div className="form-group">
                      <label>
                        Ng√†y h·∫πn <span className="required">*</span>
                      </label>
                      <input
                        type="date"
                        name="date"
                        value={appointmentForm.date}
                        onChange={handleFormChange}
                        min={new Date().toISOString().split("T")[0]}
                        required
                      />
                    </div>

                    <div className="form-group">
                      <label>
                        Khung gi·ªù mong mu·ªën <span className="required">*</span>
                      </label>
                      <select
                        name="time"
                        value={appointmentForm.time}
                        onChange={handleFormChange}
                        required
                      >
                        <option value="">Ch·ªçn khung gi·ªù</option>
                        <option value="08:00 - 08:30">08:00 - 08:30</option>
                        <option value="08:30 - 09:00">08:30 - 09:00</option>
                        <option value="09:00 - 09:30">09:00 - 09:30</option>
                        <option value="09:30 - 10:00">09:30 - 10:00</option>
                        <option value="10:00 - 10:30">10:00 - 10:30</option>
                        <option value="10:30 - 11:00">10:30 - 11:00</option>
                        <option value="14:00 - 14:30">14:00 - 14:30</option>
                        <option value="14:30 - 15:00">14:30 - 15:00</option>
                        <option value="15:00 - 15:30">15:00 - 15:30</option>
                        <option value="15:30 - 16:00">15:30 - 16:00</option>
                      </select>
                    </div>

                    <div className="form-group">
                      <label>
                        V·∫•n ƒë·ªÅ c·∫ßn t∆∞ v·∫•n <span className="required">*</span>
                      </label>
                      <select
                        name="issue"
                        value={appointmentForm.issue}
                        onChange={handleFormChange}
                        required
                      >
                        <option value="">Ch·ªçn v·∫•n ƒë·ªÅ</option>
                        <option value="H·ªçc t·∫≠p v√† th√†nh t√≠ch">
                          H·ªçc t·∫≠p v√† th√†nh t√≠ch
                        </option>
                        <option value="H√†nh vi v√† k·ª∑ lu·∫≠t">
                          H√†nh vi v√† k·ª∑ lu·∫≠t
                        </option>
                        <option value="S·ª©c kh·ªèe v√† t√¢m l√Ω">
                          S·ª©c kh·ªèe v√† t√¢m l√Ω
                        </option>
                        <option value="ƒê·ªãnh h∆∞·ªõng ngh·ªÅ nghi·ªáp">
                          ƒê·ªãnh h∆∞·ªõng ngh·ªÅ nghi·ªáp
                        </option>
                        <option value="Quan h·ªá b·∫°n b√®">Quan h·ªá b·∫°n b√®</option>
                        <option value="Kh√°c">Kh√°c</option>
                      </select>
                    </div>

                    <div className="form-group">
                      <label>M·ª©c ƒë·ªô ∆∞u ti√™n</label>
                      <select
                        name="urgency"
                        value={appointmentForm.urgency}
                        onChange={handleFormChange}
                      >
                        <option value="normal">B√¨nh th∆∞·ªùng</option>
                        <option value="urgent">Kh·∫©n c·∫•p</option>
                        <option value="high">Cao</option>
                      </select>
                    </div>

                    <div className="form-group">
                      <label>H√¨nh th·ª©c t∆∞ v·∫•n</label>
                      <select
                        name="contactMethod"
                        value={appointmentForm.contactMethod}
                        onChange={handleFormChange}
                      >
                        <option value="phone">ƒêi·ªán tho·∫°i</option>
                        <option value="video">Video call</option>
                        <option value="inperson">Tr·ª±c ti·∫øp t·∫°i tr∆∞·ªùng</option>
                      </select>
                    </div>
                  </div>
                </div>

                <div className="form-section">
                  <h3>üìù M√¥ t·∫£ chi ti·∫øt</h3>
                  <div className="form-group full-width">
                    <label>M√¥ t·∫£ v·∫•n ƒë·ªÅ c·∫ßn t∆∞ v·∫•n</label>
                    <textarea
                      name="description"
                      value={appointmentForm.description}
                      onChange={handleFormChange}
                      placeholder="Vui l√≤ng m√¥ t·∫£ chi ti·∫øt v·∫•n ƒë·ªÅ c·∫ßn t∆∞ v·∫•n ƒë·ªÉ gi√°o vi√™n c√≥ th·ªÉ chu·∫©n b·ªã t·ªët nh·∫•t..."
                      rows="5"
                    />
                  </div>
                </div>

                <div className="form-section">
                  <h3>‚ÑπÔ∏è L∆∞u √Ω</h3>
                  <div className="info-box">
                    <ul>
                      <li>Th·ªùi gian t∆∞ v·∫•n m·ªói bu·ªïi l√† 30 ph√∫t</li>
                      <li>Nh√† tr∆∞·ªùng s·∫Ω x√°c nh·∫≠n l·ªãch h·∫πn trong v√≤ng 24 gi·ªù</li>
                      <li>
                        N·∫øu c·∫ßn thay ƒë·ªïi l·ªãch h·∫πn, vui l√≤ng li√™n h·ªá tr∆∞·ªõc 4 gi·ªù
                      </li>
                      <li>
                        ƒê·ªëi v·ªõi v·∫•n ƒë·ªÅ kh·∫©n c·∫•p, vui l√≤ng g·ªçi tr·ª±c ti·∫øp hotline
                      </li>
                    </ul>
                  </div>
                </div>

                <div className="form-actions">
                  <button
                    type="button"
                    className="btn-cancel"
                    onClick={() => setShowNewAppointmentModal(false)}
                  >
                    H·ªßy b·ªè
                  </button>
                  <button type="submit" className="btn-submit">
                    üìÖ G·ª≠i y√™u c·∫ßu ƒë·∫∑t l·ªãch
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

const ProfilePage = () => {
  const [formData, setFormData] = useState({
    name: "Nguy·ªÖn VƒÉn A",
    birthDate: "15/04/1985",
    phone: "0912345678",
    email: "nguyenvana@gmail.com",
    address: "123 ƒê∆∞·ªùng Nguy·ªÖn Tr√£i, Qu·∫≠n 1, TP.HCM",
    relationship: "Cha m·∫π",
  });

  const [isEditing, setIsEditing] = useState(false);

  const handleChange = (e) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value,
    });
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    setIsEditing(false);
    alert("C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng!");
  };

  const children = [
    {
      id: 1,
      name: "Nguy·ªÖn VƒÉn B",
      gender: "Nam",
      age: 7,
      class: "2A2",
      avatar: "üë¶",
      status: "verified",
      statusText: "ƒê√£ x√°c nh·∫≠n s·ªë ƒëi·ªán tho·∫°i th√†nh c√¥ng",
    },
    {
      id: 2,
      name: "Nguy·ªÖn Th·ªã C",
      gender: "N·ªØ",
      age: 5,
      class: "K√≠ch",
      avatar: "üëß",
      status: "pending",
      statusText: "Ch∆∞a x√°c nh·∫≠n",
    },
  ];

  return (
    <div className="profile-page">
      <div className="container">
        <div className="page-header">
          <h1>H·ªì s∆° c·ªßa t√¥i</h1>
          <p>Qu·∫£n l√Ω th√¥ng tin c√° nh√¢n v√† gia ƒë√¨nh</p>
        </div>

        <div className="profile-content">
          <div className="profile-card">
            <div className="card-header">
              <h2>Th√¥ng tin c√° nh√¢n</h2>
              <button
                className={`btn-edit ${isEditing ? "editing" : ""}`}
                onClick={() => setIsEditing(!isEditing)}
              >
                {isEditing ? "‚ùå H·ªßy" : "‚úèÔ∏è Ch·ªânh s·ª≠a"}
              </button>
            </div>

            <form onSubmit={handleSubmit} className="profile-form">
              <div className="form-row">
                <div className="form-group">
                  <label>H·ªç v√† t√™n *</label>
                  <input
                    type="text"
                    name="name"
                    value={formData.name}
                    onChange={handleChange}
                    placeholder="Nguy·ªÖn VƒÉn A"
                    readOnly={!isEditing}
                    className={!isEditing ? "readonly" : ""}
                  />
                </div>

                <div className="form-group">
                  <label>Ng√†y sinh</label>
                  <input
                    type="text"
                    name="birthDate"
                    value={formData.birthDate}
                    onChange={handleChange}
                    placeholder="15/04/1985"
                    readOnly={!isEditing}
                    className={!isEditing ? "readonly" : ""}
                  />
                </div>
              </div>

              <div className="form-row">
                <div className="form-group">
                  <label>S·ªë ƒëi·ªán tho·∫°i</label>
                  <input
                    type="tel"
                    name="phone"
                    value={formData.phone}
                    onChange={handleChange}
                    placeholder="0912345678"
                    readOnly={!isEditing}
                    className={!isEditing ? "readonly" : ""}
                  />
                </div>

                <div className="form-group">
                  <label>Email</label>
                  <input
                    type="email"
                    name="email"
                    value={formData.email}
                    onChange={handleChange}
                    placeholder="nguyenvana@gmail.com"
                    readOnly={!isEditing}
                    className={!isEditing ? "readonly" : ""}
                  />
                </div>
              </div>

              <div className="form-group full-width">
                <label>ƒê·ªãa ch·ªâ</label>
                <input
                  type="text"
                  name="address"
                  value={formData.address}
                  onChange={handleChange}
                  placeholder="123 ƒê∆∞·ªùng Nguy·ªÖn Tr√£i, Qu·∫≠n 1, TP.HCM"
                  readOnly={!isEditing}
                  className={!isEditing ? "readonly" : ""}
                />
              </div>

              <div className="form-section">
                <h3>Quan h·ªá gia ƒë√¨nh</h3>
                <div className="relationship-options">
                  <label className="radio-option">
                    <input
                      type="radio"
                      name="relationship"
                      value="Cha m·∫π"
                      checked={formData.relationship === "Cha m·∫π"}
                      onChange={handleChange}
                      disabled={!isEditing}
                    />
                    <span>Cha m·∫π</span>
                  </label>
                  <label className="radio-option">
                    <input
                      type="radio"
                      name="relationship"
                      value="Ng∆∞·ªùi gi√°m h·ªô"
                      checked={formData.relationship === "Ng∆∞·ªùi gi√°m h·ªô"}
                      onChange={handleChange}
                      disabled={!isEditing}
                    />
                    <span>Ng∆∞·ªùi gi√°m h·ªô</span>
                  </label>
                </div>
              </div>

              {isEditing && (
                <div className="form-actions">
                  <button type="submit" className="btn-submit">
                    üíæ L∆∞u thay ƒë·ªïi
                  </button>
                </div>
              )}
            </form>
          </div>

          <div className="children-section">
            <div className="section-header">
              <h2>C√°c con c·ªßa t√¥i</h2>
              <button className="btn-add-child">+ Th√™m con m·ªõi</button>
            </div>

            <div className="children-list">
              {children.map((child) => (
                <div key={child.id} className="child-profile-card">
                  <div className="child-avatar-section">
                    <span className="child-avatar">{child.avatar}</span>
                    <div className="child-basic-info">
                      <h4>{child.name}</h4>
                      <p>
                        {child.gender} ‚Ä¢ {child.age} tu·ªïi, h·ªçc l·ªõp {child.class}
                      </p>
                    </div>
                  </div>

                  <div className="child-status">
                    <span className={`status-badge ${child.status}`}>
                      {child.statusText}
                    </span>
                  </div>

                  <div className="child-actions">
                    <button className="btn-view-health">
                      üè• Xem h·ªì s∆° s·ª©c kh·ªèe
                    </button>
                    <button className="btn-edit-child">‚úèÔ∏è S·ª≠a th√¥ng tin</button>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

const MedicalPage = () => {
  return (
    <div className="home-page">
      <section className="hero-section">
        <div className="hero-content">
          <h1>Gi·ªõi thi·ªáu v·ªÅ Tr∆∞·ªùng Ti·ªÉu h·ªçc XYZ</h1>
          <p>Ch√∫ng t√¥i lu√¥n chƒÉm s√≥c s·ª©c kh·ªèe cho con em b·∫°n</p>
        </div>
      </section>

      <section className="intro-section">
        <div className="container">
          <h2>L·ªùi ch√†o t·ª´ Ban Gi√°m hi·ªáu</h2>
          <div className="intro-content">
            <div className="principal-info">
              <div className="principal-card">
                <strong>√îng Nguy·ªÖn VƒÉn A</strong>
                <p>Hi·ªáu tr∆∞·ªùng</p>
              </div>
              <div className="principal-card">
                <strong>√îng Nguy·ªÖn VƒÉn B</strong>
                <p>Ph√≥ Hi·ªáu tr∆∞·ªùng</p>
              </div>
            </div>
            <div className="message">
              <p>
                Ch√∫ng t√¥i r·∫•t h√¢n h·∫°nh ƒë∆∞·ª£c ph·ª•c v·ª• v√† chƒÉm s√≥c s·ª©c kh·ªèe cho c√°c
                con. V·ªõi ƒë·ªôi ng≈© y b√°c sƒ© gi√†u kinh nghi·ªám v√† trang thi·∫øt b·ªã
                hi·ªán ƒë·∫°i, ch√∫ng t√¥i cam k·∫øt mang l·∫°i d·ªãch v·ª• t·ªët nh·∫•t cho s·ª©c
                kh·ªèe c·ªßa c√°c con.
              </p>
            </div>
          </div>
        </div>
      </section>

      <section className="services-section">
        <div className="container">
          <h2>L·ªãch s·ª≠ ho·∫°t ƒë·ªông & Ph√°t tri·ªÉn</h2>
          <div className="timeline">
            <div className="timeline-item">
              <div className="timeline-icon">üìò</div>
              <div className="timeline-content">
                <h4>S·ª©c kh·ªèe h·ªçc ƒë∆∞·ªùng</h4>
                <p>
                  Ch∆∞∆°ng tr√¨nh kh√°m s·ª©c kh·ªèe ƒë·ªãnh k·ª≥ cho h·ªçc sinh v·ªõi ƒë·ªôi ng≈© y
                  b√°c sƒ© chuy√™n nghi·ªáp.
                </p>
              </div>
            </div>
            <div className="timeline-item">
              <div className="timeline-icon">üè•</div>
              <div className="timeline-content">
                <h4>ChƒÉm s√≥c y t·∫ø to√†n di·ªán</h4>
                <p>
                  D·ªãch v·ª• chƒÉm s√≥c s·ª©c kh·ªèe to√†n di·ªán t·ª´ ph√≤ng b·ªánh ƒë·∫øn ƒëi·ªÅu tr·ªã
                  c√°c v·∫•n ƒë·ªÅ s·ª©c kh·ªèe th∆∞·ªùng g·∫∑p.
                </p>
              </div>
            </div>
          </div>
        </div>
      </section>

      <section className="stats-section">
        <div className="container">
          <div className="stats-grid">
            <div className="stat-item">
              <h3>23</h3>
              <p>NƒÉm kinh nghi·ªám</p>
            </div>
            <div className="stat-item">
              <h3>1200+</h3>
              <p>H·ªçc sinh</p>
            </div>
            <div className="stat-item">
              <h3>80+</h3>
              <p>Gi√°o vi√™n v√† nh√¢n vi√™n</p>
            </div>
            <div className="stat-item">
              <h3>95%</h3>
              <p>H·ªçc sinh ƒë·∫°t chu·∫©n</p>
            </div>
          </div>
        </div>
      </section>
    </div>
  );
};

const HealthDeclarationPage = () => {
  const [selectedChildIndex, setSelectedChildIndex] = useState(0);

  // D·ªØ li·ªáu c√°c con (c√≥ th·ªÉ share t·ª´ HomePage ho·∫∑c context)
  const children = [
    {
      id: 1,
      name: "Nguy·ªÖn VƒÉn An",
      age: 7,
      class: "2A2",
      avatar: "üë¶",
    },
    {
      id: 2,
      name: "Nguy·ªÖn Th·ªã B√¨nh",
      age: 5,
      class: "K√≠ch",
      avatar: "üëß",
    },
  ];

  const selectedChild = children[selectedChildIndex];

  const [healthForm, setHealthForm] = useState({
    studentName: selectedChild.name,
    class: selectedChild.class,
    date: new Date().toISOString().split("T")[0],

    // Th√¥ng tin c∆° b·∫£n
    temperature: "",
    weight: "",
    height: "",
    bloodPressure: "",
    heartRate: "",

    // Tri·ªáu ch·ª©ng
    symptoms: {
      fever: false,
      cough: false,
      soreThroat: false,
      runnyNose: false,
      shortBreath: false,
      headache: false,
      fatigue: false,
      nausea: false,
      diarrhea: false,
      musclePain: false,
      lossOfTaste: false,
      skinRash: false,
    },

    // Tri·ªáu ch·ª©ng kh√°c
    otherSymptoms: "",

    // Ti·ªÅn s·ª≠ b·ªánh
    medicalHistory: {
      chronicDiseases: "",
      allergies: "",
      currentMedications: "",
      recentSurgery: false,
      recentSurgeryDetails: "",
    },

    // Ti·∫øp x√∫c
    exposure: {
      covid19Contact: false,
      covid19ContactDetails: "",
      travelHistory: false,
      travelDetails: "",
      crowdedPlaces: false,
      crowdedPlacesDetails: "",
    },

    // V·∫Øc xin
    vaccination: {
      covidVaccine: "",
      vaccineDate: "",
      vaccineDose: "",
      otherVaccines: "",
    },

    // Ghi ch√∫
    notes: "",
    parentSignature: false,
  });

  // C·∫≠p nh·∫≠t form khi ch·ªçn con kh√°c
  const handleChildSelect = (index) => {
    setSelectedChildIndex(index);
    const child = children[index];
    setHealthForm((prev) => ({
      ...prev,
      studentName: child.name,
      class: child.class,
      // Reset form khi ch·ªçn con kh√°c
      temperature: "",
      weight: "",
      height: "",
      bloodPressure: "",
      heartRate: "",
      symptoms: {
        fever: false,
        cough: false,
        soreThroat: false,
        runnyNose: false,
        shortBreath: false,
        headache: false,
        fatigue: false,
        nausea: false,
        diarrhea: false,
        musclePain: false,
        lossOfTaste: false,
        skinRash: false,
      },
      otherSymptoms: "",
      medicalHistory: {
        chronicDiseases: "",
        allergies: "",
        currentMedications: "",
        recentSurgery: false,
        recentSurgeryDetails: "",
      },
      exposure: {
        covid19Contact: false,
        covid19ContactDetails: "",
        travelHistory: false,
        travelDetails: "",
        crowdedPlaces: false,
        crowdedPlacesDetails: "",
      },
      vaccination: {
        covidVaccine: "",
        vaccineDate: "",
        vaccineDose: "",
        otherVaccines: "",
      },
      notes: "",
      parentSignature: false,
    }));
  };

  const handleInputChange = (e) => {
    const { name, value, type, checked } = e.target;

    if (name.includes(".")) {
      const [section, field] = name.split(".");
      setHealthForm((prev) => ({
        ...prev,
        [section]: {
          ...prev[section],
          [field]: type === "checkbox" ? checked : value,
        },
      }));
    } else {
      setHealthForm((prev) => ({
        ...prev,
        [name]: type === "checkbox" ? checked : value,
      }));
    }
  };

  const handleSymptomChange = (symptom) => {
    setHealthForm((prev) => ({
      ...prev,
      symptoms: {
        ...prev.symptoms,
        [symptom]: !prev.symptoms[symptom],
      },
    }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    console.log("Health Declaration:", healthForm);
    alert(`ƒê√£ g·ª≠i khai b√°o s·ª©c kh·ªèe cho ${selectedChild.name} th√†nh c√¥ng!`);
  };

  return (
    <div className="health-declaration-page">
      <div className="container">
        <div className="page-header">
          <h1>Khai b√°o S·ª©c kh·ªèe</h1>
          <p>
            Vui l√≤ng khai b√°o t√¨nh tr·∫°ng s·ª©c kh·ªèe h√†ng ng√†y ƒë·ªÉ ƒë·∫£m b·∫£o an to√†n
            cho c·ªông ƒë·ªìng tr∆∞·ªùng h·ªçc
          </p>
        </div>

        {/* Child Selection Section */}
        <div className="child-selection-section">
          <h2>Ch·ªçn con c·ªßa b·∫°n</h2>
          <div className="child-selection-cards">
            {children.map((child, index) => (
              <div
                key={child.id}
                className={`child-selection-card ${
                  index === selectedChildIndex ? "active" : ""
                }`}
                onClick={() => handleChildSelect(index)}
              >
                <span className="child-avatar">{child.avatar}</span>
                <div className="child-details">
                  <h4>{child.name}</h4>
                  <p>
                    L·ªõp {child.class} ‚Ä¢ {child.age} tu·ªïi
                  </p>
                </div>
              </div>
            ))}
          </div>
        </div>

        <form onSubmit={handleSubmit} className="health-form">
          {/* Th√¥ng tin h·ªçc sinh */}
          <div className="form-section">
            <h3>üìã Th√¥ng tin h·ªçc sinh</h3>
            <div className="form-grid">
              <div className="form-group">
                <label>H·ªç v√† t√™n h·ªçc sinh</label>
                <input
                  type="text"
                  name="studentName"
                  value={healthForm.studentName}
                  onChange={handleInputChange}
                  readOnly
                />
              </div>
              <div className="form-group">
                <label>L·ªõp</label>
                <input
                  type="text"
                  name="class"
                  value={healthForm.class}
                  onChange={handleInputChange}
                  readOnly
                />
              </div>
              <div className="form-group">
                <label>Ng√†y khai b√°o</label>
                <input
                  type="date"
                  name="date"
                  value={healthForm.date}
                  onChange={handleInputChange}
                  required
                />
              </div>
            </div>
          </div>

          {/* Ch·ªâ s·ªë s·ª©c kh·ªèe */}
          <div className="form-section">
            <h3>üå°Ô∏è Ch·ªâ s·ªë s·ª©c kh·ªèe c∆° b·∫£n</h3>
            <div className="form-grid">
              <div className="form-group">
                <label>
                  Nhi·ªát ƒë·ªô c∆° th·ªÉ (¬∞C) <span className="required">*</span>
                </label>
                <input
                  type="number"
                  step="0.1"
                  name="temperature"
                  value={healthForm.temperature}
                  onChange={handleInputChange}
                  placeholder="36.5"
                  required
                />
              </div>
              <div className="form-group">
                <label>C√¢n n·∫∑ng (kg)</label>
                <input
                  type="number"
                  step="0.1"
                  name="weight"
                  value={healthForm.weight}
                  onChange={handleInputChange}
                  placeholder="26.0"
                />
              </div>
              <div className="form-group">
                <label>Chi·ªÅu cao (cm)</label>
                <input
                  type="number"
                  name="height"
                  value={healthForm.height}
                  onChange={handleInputChange}
                  placeholder="125"
                />
              </div>
              <div className="form-group">
                <label>Huy·∫øt √°p</label>
                <input
                  type="text"
                  name="bloodPressure"
                  value={healthForm.bloodPressure}
                  onChange={handleInputChange}
                  placeholder="120/80"
                />
              </div>
              <div className="form-group">
                <label>Nh·ªãp tim (l·∫ßn/ph√∫t)</label>
                <input
                  type="number"
                  name="heartRate"
                  value={healthForm.heartRate}
                  onChange={handleInputChange}
                  placeholder="80"
                />
              </div>
            </div>
          </div>

          {/* Tri·ªáu ch·ª©ng */}
          <div className="form-section">
            <h3>ü§í Tri·ªáu ch·ª©ng trong 24h qua</h3>
            <p className="section-note">
              Vui l√≤ng ƒë√°nh d·∫•u c√°c tri·ªáu ch·ª©ng m√† con b·∫°n c√≥ trong 24h qua:
            </p>
            <div className="symptoms-grid">
              {Object.entries({
                fever: "S·ªët (‚â•37.5¬∞C)",
                cough: "Ho",
                soreThroat: "ƒêau h·ªçng",
                runnyNose: "S·ªï m≈©i",
                shortBreath: "Kh√≥ th·ªü",
                headache: "ƒêau ƒë·∫ßu",
                fatigue: "M·ªát m·ªèi",
                nausea: "Bu·ªìn n√¥n",
                diarrhea: "Ti√™u ch·∫£y",
                musclePain: "ƒêau c∆°",
                lossOfTaste: "M·∫•t v·ªã gi√°c/kh·ª©u gi√°c",
                skinRash: "Ph√°t ban da",
              }).map(([key, label]) => (
                <label key={key} className="symptom-checkbox">
                  <input
                    type="checkbox"
                    checked={healthForm.symptoms[key]}
                    onChange={() => handleSymptomChange(key)}
                  />
                  <span className="checkmark"></span>
                  <span>{label}</span>
                </label>
              ))}
            </div>

            {/* Tri·ªáu ch·ª©ng kh√°c */}
            <div className="form-group full-width symptoms-other">
              <label>Tri·ªáu ch·ª©ng kh√°c (n·∫øu c√≥)</label>
              <textarea
                name="otherSymptoms"
                value={healthForm.otherSymptoms}
                onChange={handleInputChange}
                placeholder="VD: Ch·∫£y n∆∞·ªõc m·∫Øt, ng·ª©a m·∫Øt, ƒëau b·ª•ng, bu·ªìn ng·ªß, kh√≥ t·∫≠p trung..."
                rows="3"
              />
              <small className="form-note">
                üí° M√¥ t·∫£ chi ti·∫øt c√°c tri·ªáu ch·ª©ng kh√°c m√† con b·∫°n g·∫∑p ph·∫£i nh∆∞ng
                kh√¥ng c√≥ trong danh s√°ch tr√™n
              </small>
            </div>
          </div>

          {/* Ti·ªÅn s·ª≠ b·ªánh */}
          <div className="form-section">
            <h3>üè• Ti·ªÅn s·ª≠ b·ªánh v√† ƒëi·ªÅu tr·ªã</h3>
            <div className="form-grid">
              <div className="form-group full-width">
                <label>B·ªánh m√£n t√≠nh (n·∫øu c√≥)</label>
                <textarea
                  name="medicalHistory.chronicDiseases"
                  value={healthForm.medicalHistory.chronicDiseases}
                  onChange={handleInputChange}
                  placeholder="VD: Hen suy·ªÖn, tim m·∫°ch, ti·ªÉu ƒë∆∞·ªùng..."
                  rows="3"
                />
              </div>
              <div className="form-group full-width">
                <label>D·ªã ·ª©ng (n·∫øu c√≥)</label>
                <textarea
                  name="medicalHistory.allergies"
                  value={healthForm.medicalHistory.allergies}
                  onChange={handleInputChange}
                  placeholder="VD: D·ªã ·ª©ng th·ª±c ph·∫©m, thu·ªëc, ph·∫•n hoa..."
                  rows="3"
                />
              </div>
              <div className="form-group full-width">
                <label>Thu·ªëc ƒëang s·ª≠ d·ª•ng</label>
                <textarea
                  name="medicalHistory.currentMedications"
                  value={healthForm.medicalHistory.currentMedications}
                  onChange={handleInputChange}
                  placeholder="Li·ªát k√™ c√°c lo·∫°i thu·ªëc ƒëang d√πng (n·∫øu c√≥)"
                  rows="3"
                />
              </div>
              <div className="form-group full-width">
                <label className="checkbox-label">
                  <input
                    type="checkbox"
                    name="medicalHistory.recentSurgery"
                    checked={healthForm.medicalHistory.recentSurgery}
                    onChange={handleInputChange}
                  />
                  <span className="checkmark"></span>
                  <span>C√≥ ph·∫´u thu·∫≠t trong 30 ng√†y qua</span>
                </label>
                {healthForm.medicalHistory.recentSurgery && (
                  <textarea
                    name="medicalHistory.recentSurgeryDetails"
                    value={healthForm.medicalHistory.recentSurgeryDetails}
                    onChange={handleInputChange}
                    placeholder="Chi ti·∫øt v·ªÅ ph·∫´u thu·∫≠t..."
                    rows="2"
                    className="mt-2"
                  />
                )}
              </div>
            </div>
          </div>

          {/* Ti·∫øp x√∫c */}
          <div className="form-section">
            <h3>üë• L·ªãch s·ª≠ ti·∫øp x√∫c (14 ng√†y qua)</h3>
            <div className="form-grid">
              <div className="form-group full-width">
                <label className="checkbox-label">
                  <input
                    type="checkbox"
                    name="exposure.covid19Contact"
                    checked={healthForm.exposure.covid19Contact}
                    onChange={handleInputChange}
                  />
                  <span className="checkmark"></span>
                  <span>C√≥ ti·∫øp x√∫c v·ªõi ng∆∞·ªùi m·∫Øc COVID-19 ho·∫∑c F1</span>
                </label>
                {healthForm.exposure.covid19Contact && (
                  <textarea
                    name="exposure.covid19ContactDetails"
                    value={healthForm.exposure.covid19ContactDetails}
                    onChange={handleInputChange}
                    placeholder="Chi ti·∫øt v·ªÅ vi·ªác ti·∫øp x√∫c..."
                    rows="2"
                    className="mt-2"
                  />
                )}
              </div>

              <div className="form-group full-width">
                <label className="checkbox-label">
                  <input
                    type="checkbox"
                    name="exposure.travelHistory"
                    checked={healthForm.exposure.travelHistory}
                    onChange={handleInputChange}
                  />
                  <span className="checkmark"></span>
                  <span>C√≥ ƒëi du l·ªãch/c√¥ng t√°c xa</span>
                </label>
                {healthForm.exposure.travelHistory && (
                  <textarea
                    name="exposure.travelDetails"
                    value={healthForm.exposure.travelDetails}
                    onChange={handleInputChange}
                    placeholder="ƒê·ªãa ƒëi·ªÉm v√† th·ªùi gian ƒëi l·∫°i..."
                    rows="2"
                    className="mt-2"
                  />
                )}
              </div>

              <div className="form-group full-width">
                <label className="checkbox-label">
                  <input
                    type="checkbox"
                    name="exposure.crowdedPlaces"
                    checked={healthForm.exposure.crowdedPlaces}
                    onChange={handleInputChange}
                  />
                  <span className="checkmark"></span>
                  <span>C√≥ ƒë·∫øn n∆°i ƒë√¥ng ng∆∞·ªùi (50 ng∆∞·ªùi)</span>
                </label>
                {healthForm.exposure.crowdedPlaces && (
                  <textarea
                    name="exposure.crowdedPlacesDetails"
                    value={healthForm.exposure.crowdedPlacesDetails}
                    onChange={handleInputChange}
                    placeholder="ƒê·ªãa ƒëi·ªÉm v√† th·ªùi gian..."
                    rows="2"
                    className="mt-2"
                  />
                )}
              </div>
            </div>
          </div>

          {/* V·∫Øc xin */}
          <div className="form-section">
            <h3>üíâ T√¨nh tr·∫°ng ti√™m ch·ªßng</h3>
            <div className="form-grid">
              <div className="form-group">
                <label>V·∫Øc xin COVID-19</label>
                <select
                  name="vaccination.covidVaccine"
                  value={healthForm.vaccination.covidVaccine}
                  onChange={handleInputChange}
                >
                  <option value="">Ch·ªçn lo·∫°i v·∫Øc xin</option>
                  <option value="pfizer">Pfizer-BioNTech</option>
                  <option value="moderna">Moderna</option>
                  <option value="astrazeneca">AstraZeneca</option>
                  <option value="sinovac">Sinovac</option>
                  <option value="other">Kh√°c</option>
                  <option value="none">Ch∆∞a ti√™m</option>
                </select>
              </div>

              <div className="form-group">
                <label>Ng√†y ti√™m g·∫ßn nh·∫•t</label>
                <input
                  type="date"
                  name="vaccination.vaccineDate"
                  value={healthForm.vaccination.vaccineDate}
                  onChange={handleInputChange}
                />
              </div>

              <div className="form-group">
                <label>S·ªë m≈©i ƒë√£ ti√™m</label>
                <select
                  name="vaccination.vaccineDose"
                  value={healthForm.vaccination.vaccineDose}
                  onChange={handleInputChange}
                >
                  <option value="">Ch·ªçn s·ªë m≈©i</option>
                  <option value="1">1 m≈©i</option>
                  <option value="2">2 m≈©i</option>
                  <option value="3">3 m≈©i</option>
                  <option value="4+">4 m≈©i tr·ªü l√™n</option>
                </select>
              </div>

              <div className="form-group full-width">
                <label>V·∫Øc xin kh√°c (trong 30 ng√†y qua)</label>
                <textarea
                  name="vaccination.otherVaccines"
                  value={healthForm.vaccination.otherVaccines}
                  onChange={handleInputChange}
                  placeholder="VD: V·∫Øc xin c√∫m, v·∫Øc xin vi√™m gan B..."
                  rows="2"
                />
              </div>
            </div>
          </div>

          {/* Ghi ch√∫ */}
          <div className="form-section">
            <h3>üìù Ghi ch√∫ th√™m</h3>
            <div className="form-group full-width">
              <label>Th√¥ng tin b·ªï sung</label>
              <textarea
                name="notes"
                value={healthForm.notes}
                onChange={handleInputChange}
                placeholder="B·∫•t k·ª≥ th√¥ng tin n√†o kh√°c m√† b·∫°n mu·ªën chia s·∫ª v·ªÅ s·ª©c kh·ªèe c·ªßa con..."
                rows="4"
              />
            </div>
          </div>

          {/* Cam k·∫øt */}
          <div className="form-section">
            <h3>‚úçÔ∏è Cam k·∫øt</h3>
            <div className="commitment-box">
              <p>
                T√¥i cam ƒëoan r·∫±ng t·∫•t c·∫£ th√¥ng tin khai b√°o tr√™n l√† ch√≠nh x√°c v√†
                trung th·ª±c. T√¥i hi·ªÉu r·∫±ng vi·ªác khai b√°o kh√¥ng ƒë√∫ng s·ª± th·∫≠t c√≥
                th·ªÉ ·∫£nh h∆∞·ªüng ƒë·∫øn s·ª©c kh·ªèe c·ªßa c·ªông ƒë·ªìng v√† c√≥ th·ªÉ b·ªã x·ª≠ l√Ω theo
                quy ƒë·ªãnh ph√°p lu·∫≠t.
              </p>

              <label className="checkbox-label">
                <input
                  type="checkbox"
                  name="parentSignature"
                  checked={healthForm.parentSignature}
                  onChange={handleInputChange}
                  required
                />
                <span className="checkmark"></span>
                <span>T√¥i ƒë·ªìng √Ω v√† cam k·∫øt th√¥ng tin tr√™n l√† ch√≠nh x√°c</span>
              </label>
            </div>
          </div>

          {/* Submit buttons */}
          <div className="form-actions">
            <button type="button" className="btn-save-draft">
              üíæ L∆∞u nh√°p
            </button>
            <button type="submit" className="btn-submit">
              üì§ G·ª≠i khai b√°o
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

function App() {
  const [currentPage, setCurrentPage] = useState("home");

  // Expose setCurrentPage to global scope for HomePage component
  window.App = { setCurrentPage };

  const renderPage = () => {
    switch (currentPage) {
      case "home":
        return <HomePage />;
      case "profile":
        return <ProfilePage />;
      case "appointment":
        return <AppointmentPage />;
      case "medical":
        return <MedicalPage />;
      case "health-declaration":
        return <HealthDeclarationPage />;
      default:
        return <HomePage />;
    }
  };

  return (
    <div className="App">
      <Header currentPage={currentPage} setCurrentPage={setCurrentPage} />
      <main className="main-content">{renderPage()}</main>
    </div>
  );
}

export default App;
